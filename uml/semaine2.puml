@startuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam defaultFontSize 15
skinparam style strictuml
hide empty members
left to right direction

package des {
  class Des {
    + lancerDes(nbDes : Integer, nbFaces : Integer) : Integer
  }
}

package donjons {
  class Donjon {
    - m_alphabet : String[*]
    - m_carte : Placable[*][*]
    - m_hauteur : Integer
    - m_largeur : Integer
    - m_casevide : CaseVide
    - m_listeMonstre : Monstre[*]

    + <<create>> Donjon()
    + Donjon(hauteur : Integer, largeur : Integer)
    + afficherDonjon()
    + positionnerEmplacementVide(x : Integer, y : Integer)
    + decalerADroite(l : Placable[*])
    + decalerAGauche(l : Placable[*])
    + positionnerElementCarte(p : Placable) : Boolean
    + getCarte() : Placable[*][*]
    + getHauteur() : Integer
    + getLargeur() : Integer
    + getLettreMax() : String
    + separer()
    + getListeMonstre() : Monstre[*]
  }
}

package maitredujeu {
  class MaitreDuJeu {
    + <<create>> MaitreDuJeu()
    + creerDonjon(d : Donjon, longueur : Integer, largeur : Integer)
    + positionnerObstacle(d : Donjon, o : Obstacle) : Boolean
    + positionnerEntite(d : Donjon, e : Entite) : Boolean
    + positionnerEquipement(d : Donjon, e : Equipement) : Boolean
  }
}

package placable {
  interface Placable {
    + setLocation(x : Integer, y : Integer)
    + getPositionX() : Integer
    + getPositionY() : Integer
    + getNomAffiche() : String
    + estObstacle() : Boolean
    + estEntite() : Boolean
    + estEquipement() : Boolean
    + estCaseVide() : Boolean
  }

  class CaseVide {
    - m_positionX : Integer
    - m_positionY : Integer
    - m_nomAffiche : String
    - des : Des

    + <<create>> CaseVide(x : Integer, y : Integer)
    + setLocation(x : Integer, y : Integer)
    + getNomAffiche() : String
    + getPositionX() : Integer
    + getPositionY() : Integer
    + estCaseVide() : Boolean
  }
  package placable.entites {
  abstract class Entite <<abstract>> {
    # m_pv : Integer
    # m_pvMax : Integer
    # m_force : Integer
    # m_dexterite : Integer
    # m_initiative : Integer
    # m_positionX : Integer
    # m_positionY : Integer
    # m_vitesse : Integer
    # m_nomAffiche : String

    + setLocation(x : Integer, y : Integer)
    + getPositionX() : Integer
    + getPositionY() : Integer
    + getNomAffiche() : String
    + seDeplacer(direction : Integer, d : Donjon)
    + getPv() : Integer
    + getForce() : Integer
    + getDexterite() : Integer
    + getInitiative() : Integer
    + setPv(pv : Integer)
    + setForce(force : Integer)
    + setDexterite(dexterite : Integer)
    + setInitiative(initiative : Integer)
    + ajusterPv(valeur : Integer)
    + ajusterForce(valeur : Integer)
    + ajusterDexterite(valeur : Integer)
    + ajusterInitiative(valeur : Integer)
    + equals(obj : Object) : Boolean
    + estEntite() : Boolean
    + {static} contientObstacle(liste : Placable[*]) : Boolean
    + {static} contientEquipement(liste : Placable[*]) : Boolean
  }

  package placable.entites.monstres {
  class Monstre {
    - m_espece : String
    - m_numero : Integer
    - m_nomAttaque : String
    - m_portee : Integer
    - m_degats : Integer
    - m_classeArmure : Integer
    - des : Des
    - {static} monstres : Monstre[*]

    + <<create>> Monstre(espece : String)
    + Monstre(espece : String, portee : Integer, pv : Integer, nomattaque : String, classeArmure : Integer, force : Integer, dexterite : Integer, initiative : Integer, x : Integer, y : Integer)
    + getclasseArmure() : Integer
    + ajusterPv(valeur : Integer)
    + attaquer(cible : Personnage, carte : String[*][*]) : Boolean
    + getEspece() : String
  }
}
package placable.entites.personnages {
  class Personnage {
    # m_nom : String
    - m_race : Race
    - m_classe : Classe
    - des : Des
    - m_inventaire : Equipement[*]
    - m_armeEquipee : Armes[*]
    - m_armureEquipee : Armures[*]

    + <<create>> Personnage(nom : String, race : Integer, classe : Integer, x : Integer, y : Integer)
    + attribuerRaceClasse(race : Integer, classe : Integer)
    + attaquer(cible : Monstre) : Boolean
    + sEquiperArmure(a : Armures)
    + sEquiperArme(a : Armes)
    + ramasserEquipement(e : Equipement, carte : Placable[*][*]) : Boolean
    + getNom() : String
    + getArmeEquipee() : Armes
    + getClasseArmure() : Integer
    + getRace() : Race
    + getNomRace() : String
    + getClasse() : Classe
    + getNomClasse() : String
    + getVitesse() : Integer
    + setVitesse(vitesse : Integer)
    + ajusterVitesse(valeur : Integer)
    + ajouterEquipementInventaire(e : Equipement)
    + afficherInventaire() : String
    + toString() : String
  }
  package placable.entites.personnages.classes {
  abstract class Classe <<abstract>> {
    # m_nomClasse : String
    # m_pv : Integer
    + {abstract} initialiser(p : Personnage)
    + getNom() : String


  class Clerc {
    + <<create>> Clerc()
    + initialiser(p : Personnage)
  }

  class Guerrier {
    + <<create>> Guerrier()
    + initialiser(p : Personnage)
  }

  class Magicien {
    + <<create>> Magicien()
    + initialiser(p : Personnage)
  }

  class Roublard {
    + <<create>> Roublard()
    + initialiser(p : Personnage)
  }
 }
 }
 package placable.entites.personnages.races {
  abstract class Race <<abstract>> {
    # m_dexterite : Integer
    # m_vitesse : Integer
    # m_force : Integer
    # m_initiative : Integer
    # m_nomRace : String

    + {abstract} initialiser(p : Personnage)
    + getNom() : String



  class Nain {
    + <<create>> Nain()
    + initialiser(p : Personnage)
  }

  class Humain {
      + <<create>> Humain()
      + initialiser(p : Personnage)
    }

  class Elfe {
    + <<create>> Elfe()
    + initialiser(p : Personnage)
  }

  class Halfelin {
    + <<create>> Halfelin()
    + initialiser(p : Personnage)
  }
}
}
}
}
package placable.equipements {
  abstract class Equipement <<abstract>> {
    # m_nom : String
    # m_positionX : Integer
    # m_positionY : Integer
    # m_nomAffiche : String

    + <<create>> Equipement()
    + setLocation(x : Integer, y : Integer)
    + getNomEquipement() : String
    + getNomAffiche() : String
    + getPositionX() : Integer
    + getPositionY() : Integer
    + estEquipement() : Boolean
  }


package placable.equipements.armes {
  abstract class CAC <<abstract>> {
    + <<create>> CAC()
    + <<create>> CAC(x : Integer, y : Integer)
  }





  abstract class Distance <<abstract>> {
    + <<create>> Distance(portee : Integer)
    + <<create>> Distance(portee : Integer, x : Integer, y : Integer)
  }





  abstract class Guerre <<abstract>> {
    + <<create>> Guerre()
    + <<create>> Guerre(x : Integer, y : Integer)
    + determinerDegat()
  }






  abstract class Courantes <<abstract>> {
    + <<create>> Courantes()
    + <<create>> Courantes(x : Integer, y : Integer)
    + determinerDegat()
  }





  class Arbalete {
    + <<create>> Arbalete()
    + <<create>> Arbalete(x : Integer, y : Integer)
    + determinerDegat()
  
}




  class Arc {
    + <<create>> Arc()
    + <<create>> Arc(x : Integer, y : Integer)
    + determinerDegat()
  }






  abstract class Armes <<abstract>> {
    # m_degats : Integer
    # m_portee : Integer
    # des : Des
    # m_changeStat : Boolean

    + <<create>> Armes(portee : Integer)
    + <<create>> Armes(portee : Integer, x : Integer, y : Integer)
    + getPortee() : Integer
    + {abstract} determinerDegat()
    + getDegats() : Integer
    + getChangeStat() : Boolean
  }

  





  class Baton {
    + <<create>> Baton()
    + <<create>> Baton(x : Integer, y : Integer)
  }

  






  class EpeeLongue {
    + <<create>> EpeeLongue()
    + <<create>> EpeeLongue(x : Integer, y : Integer)
  }






  class Fronde {
    + <<create>> Fronde()
    + <<create>> Fronde(x : Integer, y : Integer)
    + determinerDegat()
  }




  class Masse {
    + <<create>> Masse()
    + <<create>> Masse(x : Integer, y : Integer)
  }





  class Rapiere {
    + <<create>> Rapiere()
    + <<create>> Rapiere(x : Integer, y : Integer)
  }
}
package placable.equipements.armures {
  abstract class Armures <<abstract>> {
    # m_classe : Integer
    # m_changeStat : Boolean
    # des : Des

    + <<create>> Armures(classe : Integer)
    + <<create>> Armures(classe : Integer, x : Integer, y : Integer)
    + getClasseArmure() : Integer
    + getChangeStat() : Boolean
  }




  abstract class Lourdes <<abstract>> {
    + <<create>> Lourdes(classe : Integer)
    + <<create>> Lourdes(classe : Integer, x : Integer, y : Integer)
  }

  



  abstract class Legeres <<abstract>> {
    + <<create>> Legeres(classe : Integer)
    + <<create>> Legeres(classe : Integer, x : Integer, y : Integer)
  }

 





  class CotteDeMailles {
    + <<create>> CotteDeMailles()
    + <<create>> CotteDeMailles(x : Integer, y : Integer)
  
  }




  class DemiPlatte {
    + <<create>> DemiPlatte()
    + <<create>> DemiPlatte(x : Integer, y : Integer)
   
  }




  class Ecailles {
    + <<create>> Ecailles()
    + <<create>> Ecailles(x : Integer, y : Integer)
   
  }




  class Harnois {
    + <<create>> Harnois()
    + <<create>> Harnois(x : Integer, y : Integer)
  }
  }
}
package placable.obstacle {
  class Obstacle {
    - m_positionX : Integer
    - m_positionY : Integer
    - m_nomAffiche : String
    - des : Des

    + <<create>> Obstacle(x : Integer, y : Integer)
    + setLocation(x : Integer, y : Integer)
    + getNomAffiche() : String
    + getPositionX() : Integer
    + getPositionY() : Integer
    + estObstacle() : Boolean
  }
}
}





package utils {
  class Utils {
    - des : Des

    + <<create>> Utils()
    + demanderChoix(scanner : Scanner, message : String, min : Integer, max : Integer) : Integer
    + demanderChoixOuParDefaut(message : String, min : Integer, max : Integer, valeurParDefaut : Integer, scanner : Scanner) : Integer
    + demanderPositionCarte(message : String, minLettre : Char, maxLettre : Char, minNumero : Integer, maxNumero : Integer, scanner : Scanner) : int[*]
    + creerMonstreAleatoire(d : Donjon) : Monstre
    + creerEquipementAleatoire(d : Donjon) : Equipement
    + creerObstacleAleatoire(d : Donjon) : Obstacle
    + creerPersonnageAleatoire(nom : String, race : Integer, classe : Integer, d : Donjon) : Personnage
  }
}


class Jeu {
  - m_joueursEnVie : ArrayList<Personnage>
  - m_utils : Utils
  - m_nbJoueurs : int
  - scanner : Scanner
  - m_d1 : Donjon
  - mdj : MaitreDuJeu
  - m_des : Des
  - alphabet : String[*]
  - m_nbObstacle : int
  - m_nbEquipements : int

  + <<create>> Jeu()
  + demarrerJeu()
  + initJoueur(nJoueur : int, d : Donjon) : Personnage
  + creerObstacleAleatoire(i : int)
  + initEquipementAleatoire(i : int)
  + creerEquipement(type : int, i : int, x : int, y : int)
  + afficherEntites()
}


class Main {
  + main(args : String[])
}



' -------------------- RELATIONS --------------------

CaseVide ..|> Placable
Entite ..|> Placable
Monstre --|> Entite
Personnage --|> Entite

Clerc --|> Classe
Guerrier --|> Classe
Magicien --|> Classe
Roublard --|> Classe

Humain --|> Race
Nain --|> Race
Elfe --|> Race
Halfelin --|> Race

MaitreDuJeu .> Donjon : <<use>>
MaitreDuJeu .> Obstacle : <<use>>
MaitreDuJeu .> Entite : <<use>>
MaitreDuJeu .> Equipement : <<use>>

Donjon .> Placable : <<use>>
Donjon .> CaseVide : <<instantiate>>
Donjon .> Monstre : <<use>>
Donjon .> ArrayList : <<use>>

CaseVide .> Des : <<use>>
Entite .> Donjon : <<use>>
Entite .> Equipement : <<use>>
Entite .> Obstacle : <<use>>
Entite .> ArrayList : <<use>>

Monstre .> Des : <<use>>
Monstre .> Personnage : <<use>>
Monstre .> ArrayList : <<use>>

Classe .> Personnage : <<use>>
Race .> Personnage : <<use>>

Personnage .> Des : <<use>>
Personnage .> Monstre : <<use>>
Personnage .> Equipement : <<use>>
Personnage .> Armes : <<use>>
Personnage .> Armures : <<use>>
Personnage .> Classe : <<use>>
Personnage .> Race : <<use>>

Equipement ..|> Placable
Equipement .> Des : <<use>>
Equipement .> Donjon : <<use>>


CAC --|> Armes



Distance --|> Armes



Guerre --|> CAC
CAC --|> Armes
Guerre .> Des : <<use>>



Courantes --|> CAC
CAC --|> Armes
Courantes .> Des : <<use>>



Arbalete --|> Distance
Distance --|> Armes
Arbalete .> Des : <<use>>



Arc --|> Distance
Distance --|> Armes
Arc .> Des : <<use>>


Armes --|> Equipement
Armes .> Des : <<use>>



Baton --|> Courantes
Courantes --|> CAC
CAC --|> Armes



EpeeLongue --|> Guerre
Guerre --|> CAC
CAC --|> Armes



Fronde --|> Distance
Distance --|> Armes
Fronde .> Des : <<use>>



Masse --|> Courantes
Courantes --|> CAC
CAC --|> Armes



Rapiere --|> Guerre
Guerre --|> CAC
CAC --|> Armes




Armures --|> Equipement
Armures .> Des : <<use>>


Lourdes --|> Armures



Legeres --|> Armures



CotteDeMailles --|> Lourdes
Lourdes --|> Armures
CotteDeMailles .> Donjon : <<use>>
CotteDeMailles .> Des : <<use>>



DemiPlatte --|> Legeres
Legeres --|> Armures
DemiPlatte .> Donjon : <<use>>
DemiPlatte .> Des : <<use>>



Ecailles --|> Legeres
Legeres --|> Armures
Ecailles .> Donjon : <<use>>
Ecailles .> Des : <<use>>


Harnois --|> Lourdes
Lourdes --|> Armures
Harnois .> Donjon : <<use>>
Harnois .> Des : <<use>>


Obstacle ..|> Placable
Obstacle .> Des : <<use>>


Utils .> Des : <<use>>
Utils .> Scanner : <<use>>
Utils .> Donjon : <<use>>
Utils .> Monstre : <<create>>
Utils .> Equipement : <<create>>
Utils .> Obstacle : <<create>>
Utils .> Personnage : <<create>>


Jeu .> Personnage : <<use>>
Jeu .> Monstre : <<use>>
Jeu .> Donjon : <<use>>
Jeu .> MaitreDuJeu : <<use>>
Jeu .> Utils : <<use>>
Jeu .> Des : <<use>>
Jeu .> Scanner : <<use>>
Jeu .> Equipement : <<use>>
Jeu .> Obstacle : <<use>>
Jeu .> Arbalete : <<create>>
Jeu .> Arc : <<create>>
Jeu .> Baton : <<create>>
Jeu .> EpeeLongue : <<create>>
Jeu .> Fronde : <<create>>
Jeu .> Masse : <<create>>
Jeu .> Rapiere : <<create>>
Jeu .> CotteDeMailles : <<create>>
Jeu .> DemiPlatte : <<create>>
Jeu .> Ecailles : <<create>>
Jeu .> Harnois : <<create>>

Main .> Jeu : <<instantiate>>

@enduml
